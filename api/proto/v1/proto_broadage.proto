syntax = "proto3";

// This document describes the `BroadageService` service and all its corresponding RPCs.
package core.broadage.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "gen/go";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Broadage API";
    version: "1.0.0";
    contact: {
      name: "NBN23";
      url: "https://github.com/NBN23dev/proto-broadage";
      email: "develop@nbn23.com";
    };
  };

  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service BroadageService {
  rpc GetLiveMatches(GetLiveMatchesRequest) returns (GetLiveMatchesResponse) {
    option (google.api.http) = {get: "/v1/matches/live"};
  }

  rpc GetTeamPlayers(GetTeamPlayersRequest) returns (GetTeamPlayersResponse) {
    option (google.api.http) = {get: "/v1/teams/{team_fid}/players"};
  }

  rpc GetMatchPlayers(GetMatchPlayersRequest) returns (GetMatchPlayersResponse) {
    option (google.api.http) = {get: "/v1/match/{match_fid}/players"};
  }

  rpc GetPlayByPlay(GetPlayByPlayRequest) returns (GetPlayByPlayResponse) {
    option (google.api.http) = {get: "/v1/match/{match_fid}/playbyplay"};
  }
}

/// GetLiveMatchesRequest represents the request to get the live matches.
message GetLiveMatchesRequest {}

/// GetLiveMatchesResponse represents the response to get the live matches.
message GetLiveMatchesResponse {
  /// Matches is the list of live matches.
  repeated MatchKey matches = 1;
}

/// MatchKey represents the key of a match.
message MatchKey {
  /// fid is the unique id of the match.
  string fid = 1;
  /// project_key is the Match Project Key.
  string project_key = 2;
}

/// GetPlayersFromTeamRequest represents the request to get the players from a team.
message GetTeamPlayersRequest {
  /// Id is the unique identifier of the team.
  string team_fid = 1;
}

/// GetPlayersFromTeamResponse represents the response to get the players from a team.
message GetTeamPlayersResponse {
  /// Players is the list of players from the team.
  repeated TeamPlayer players = 1;
}

/// Player represents a player in a game.
message TeamPlayer {
  /// fid is the unique id of the player.
  string fid = 1;
  /// name is the first name of the player.
  string name = 2;
  /// surname is the last name of the player.
  string surname = 3;
  /// number is the number of the player.
  string number = 4;
  /// license is the license of the player.
  string license = 5;
}

/// BoxScore represents the box score of a match.
message GetMatchPlayersRequest {
  /// Id is the unique identifier of the match.
  string match_fid = 1;
}

// Represents a player.
message MatchPlayer {
  // The unique identifier of the player.
  string fid = 1;
  // The player's number.
  string number = 2;
  // Indicates if the player is starting the match.
  bool start = 3;
  // Indicates if the player is the captain of the team.
  bool captain = 4;
}

// Represents a match team.
message MatchTeam {
  // The unique identifier of the team.
  string fid = 1;
  // The team's name.
  string name = 2;
  // The team's match players.
  repeated MatchPlayer players = 3;
}

/// GetMatchPlayersResponse represents the response to get the box score of a match.
message GetMatchPlayersResponse {
  /// Match home team data, including players.
  MatchTeam home_team = 1;
  /// Match away team data, including players.
  MatchTeam away_team = 2;
}

/// GetPlayByPlayRequest represents the request to get the play by play of a match.
message GetPlayByPlayRequest {
  /// match_fid is the unique identifier of the match.
  string match_fid = 1;

  /// from_sequence_no is an optional argument specifying the number of sequence
  /// from which the play by play data will be returned
  optional int32 from_sequence_no = 2;
}

/// GetPlayByPlayResponse represents the response to get the play by play of a match.
message GetPlayByPlayResponse {
  /// PlayByPlay is the play by play of the match.
  repeated MatchAction actions = 1;
  /// Events is the events of the match.
  repeated MatchEvent events = 2;
}

// Represents an event.
message MatchEvent {
  // The unique identifier for the event.
  string fid = 1;

  // The code representing the event kind.
  EventCode code = 2;

  // period represents the period of the match when the event occurred.
  int32 period = 3;

  // time is the descending period ellapse, in milliseconds, when the event occurred.
  int32 time = 4;

  // sequence is the sequence number of the event in the match.
  int32 sequence = 5;
}

// EventCode represents the type of event in a match.
enum EventCode {
  // UNSPECIFIED represents an unspecified event.
  EVENT_CODE_UNSPECIFIED = 0;

  // SOM represents the start of the match.
  EVENT_CODE_SOM = 1;

  // EOM represents the end of the match.
  EVENT_CODE_EOM = 2;

  // SOQ represents the start of a quarter.
  EVENT_CODE_SOQ = 3;

  // EOQ represents the end of a quarter.
  EVENT_CODE_EOQ = 4;
}

// SUB_CODE represents the sub-code of an action in a match.
enum ActionSubcode {
  // UNSPECIFIED represents an unspecified sub-code.
  ACTION_SUBCODE_UNSPECIFIED = 0;

  // IN_ARC represents an action inside the arc.
  ACTION_SUBCODE_IN_ARC = 1;

  // OUT_ARC represents an action outside the arc.
  ACTION_SUBCODE_OUT_ARC = 2;

  // FREE_THROW represents a free throw action.
  ACTION_SUBCODE_FREE_THROW = 3;

  // DUNK represents a dunk action.
  ACTION_SUBCODE_DUNK = 4;

  // OFFENSIVE_REBOUND represents an offensive rebound action.
  ACTION_SUBCODE_OFFENSIVE_REBOUND = 5;

  // DEFENSIVE_REBOUND represents a defensive rebound action.
  ACTION_SUBCODE_DEFENSIVE_REBOUND = 6;

  // RECEIVE_BLOCK represents a block received action.
  ACTION_SUBCODE_RECEIVE_BLOCK = 7;

  // RECEIVE_FOUL represents a foul received action.
  ACTION_SUBCODE_RECEIVE_FOUL = 8;

  // TECHNICAL represents a technical foul action.
  ACTION_SUBCODE_TECHNICAL = 9;

  // UNSPORTSMANLIKE represents an unsportsmanlike foul action.
  ACTION_SUBCODE_UNSPORTSMANLIKE = 10;

  // DISQUALIFYING represents a disqualifying foul action.
  ACTION_SUBCODE_DISQUALIFYING = 11;

  // BRAWL represents a brawl action.
  ACTION_SUBCODE_BRAWL = 12;

  // SWAP_IN represents a swap in action.
  ACTION_SUBCODE_SWAP_IN = 13;

  // SWAP_OUT represents a swap out action.
  ACTION_SUBCODE_SWAP_OUT = 14;
}

// CODE represents the code of an action in a match.
enum ActionCode {
  // ACTION_CODE_UNSPECIFIED represents an unspecified action.
  ACTION_CODE_UNSPECIFIED = 0;

  // ACTION_CODE_POINTS represents a points action.
  ACTION_CODE_POINTS = 1;

  // ACTION_CODE_FOUL represents a foul action.
  ACTION_CODE_FOUL = 2;

  // ACTION_CODE_RECEIVE represents a receive action.
  ACTION_CODE_RECEIVE = 3;

  // ACTION_CODE_REBOUND represents a rebound action.
  ACTION_CODE_REBOUND = 4;

  // ACTION_CODE_ASSIST represents an assist action.
  ACTION_CODE_ASSIST = 5;

  // ACTION_CODE_TURNOVER represents a turnover action.
  ACTION_CODE_TURNOVER = 6;

  // ACTION_CODE_STEAL represents a steal action.
  ACTION_CODE_STEAL = 7;

  // ACTION_CODE_BLOCK represents a block action.
  ACTION_CODE_BLOCK = 8;

  // ACTION_CODE_SWAP represents a swap action.
  ACTION_CODE_SWAP = 9;

  // ACTION_CODE_TIMEOUT represents a timeout action.
  ACTION_CODE_TIMEOUT = 10;
}

// Actor represents the type of Actor in a match.
enum ActorType {
  // UNSPECIFIED represents an unspecified actor type.
  ACTOR_TYPE_UNSPECIFIED = 0;

  // PLAYER represents a player in the match.
  ACTOR_TYPE_PLAYER = 1;

  // TEAM represents a team in the match.
  ACTOR_TYPE_TEAM = 2;

  // COACH represents a coach in the match.
  ACTOR_TYPE_COACH = 3;
}

// ActorType represents the type of Actor.
message Actor {
  // type is the type of the Actor.
  ActorType type = 1;

  // fid is the unique identifier of the Actor when the actor type is player or team.
  optional string fid = 2;
}

// MatchEvent represents a single action in a match.
message MatchAction {
  // fid is the unique identifier of the action.
  string fid = 1;

  // team_fid is the unique identifier of the team that performed the action.
  string team_fid = 2;

  // Actor represents who performed the action.
  Actor actor = 3;

  // code identifies the action kinde
  ActionCode code = 4;

  // For some action kinds, sub_code specifies additional data,
  // as for the case of POINTS action, in which case sub_code specifies
  // if the points were scored by a free, in-arc or out-arc throw
  optional ActionSubcode sub_code = 5;

  // For some action kinds, value specifies the action value,
  // as in the case of POINTS action, in which case
  // value specifies the action score (1, 2 or 3 points)
  optional int32 value = 6;

  // For some action kinds, result specifies the action result,
  // as in the case of POINTS action, in which case
  // result specifies if the points were scored or not
  optional bool result = 7;

  // period represents the period of the match when the action occurred.
  int32 period = 8;

  // time is the descending period ellapse, in milliseconds, when the action occurred.
  int32 time = 9;

  // sequence is the sequence number of the action in the match.
  int32 sequence = 10;
}
